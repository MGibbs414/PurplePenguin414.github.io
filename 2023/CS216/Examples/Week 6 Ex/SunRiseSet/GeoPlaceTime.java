// Delta College - CST 283 - Klingler // This class combines the Date and GeoLocation classes to a place and// time on earth.  It provides methods for calculation of sunrise/sunset // as well as length of day for a place and time.public class GeoPlaceTime {    // --------------------------------------------------------------    private Date theDate;    private GeoLocation thePlace;    private int zone;    private double sunrise, sunset, daylength;    String sunrise_str, sunset_str, daylength_str;       //----------------------------------------------------------        // Variables needed for calculations    double FC, TN, X, Y, T, T9, S, A, Z, JD, YD, WD;    double SE, MA, ML, C, N, RV, Wl, W, lat, lon;    double DL, TA, TL, DE, RA, Q, S0, H, RI, ZT;    double setmins, risemins;    int sw, sw1;    // Global constants needed for calculations    double OB = 0.409095;    double L0 = 4.88376619;    double L1 = 0.017202791;    double A0 = 6.23471229;    double A1 = 0.01720197;    double E = 0.016728;    double EO = 0.00218;    //----------------------------------------------------------    public GeoPlaceTime(int m, int d, int y, double lat, double lon, int z) {        theDate = new Date(m, d, y);        thePlace = new GeoLocation(lat, lon);        zone = z;    }    //----------------------------------------------------------    // Mutators/Accessors    public String getSunrise() {        return sunrise_str;    }    public String getSunset() {        return sunset_str;    }    public String getDaylength() {        return daylength_str;    }    public void setTimeZone(int z) {        zone = z;    }    //----------------------------------------------------------    public void makeTimes() {        if (thePlace.validCoordinate()) {            if (theDate.validDate()) {                calculate();                if (sunrise > 9000) // Sun never sets                {                    sunrise_str = "Sunlight all day";                    sunset_str = "";                    daylength_str = "";                } else if (sunrise < -9000) // Sun never rises                {                    sunrise_str = "No sunlight during day";                    sunset_str = "";                    daylength_str = "";                } else // Sun rises and sets                {                    // GMT                    if (zone == 0) {                        sunrise_str = toGMT(sunrise);                        sunrise_str = sunrise_str + "Z";                        sunset_str = toGMT(sunset);                        sunset_str = sunset_str + "Z";                    }                    // Traditional time                     if (zone != 0) {                        sunrise_str = toNormal(sunrise, zone);                        sunset_str = toNormal(sunset, zone);                    }                    // Daylength                    daylength_str = String.valueOf((int) daylength);                }            } else {                sunrise_str = "Invalid date";                sunset_str = "";                daylength_str = "";            }        } else {            sunrise_str = "Coordinates out of range";            sunset_str = "(Latitude:  0.0 .. 90.0)";            daylength_str = "(Longitude:  0.0 .. 180.0";        }    }    //----------------------------------------------------------    public String toString()    {        return  "Date: " + theDate.toString() + "\n" +                "Location: " + thePlace.toString()  + "\n" +                "Time Zone: " + zone ;    }    //----------------------------------------------------------    public String getAlmanacData()    {        return "Sunrise: " + sunrise_str + "\n" +                "Sunset:  " + sunset_str  + "\n" +               "Length of Day: " + daylength_str  + " minutes";    }    //----------------------------------------------------------    private String toGMT(double inTime) {        String temp_str;        temp_str = String.valueOf((int) inTime);        if (inTime < 1000) {            temp_str = "0" + temp_str;        }        if (inTime < 100) {            temp_str = "0" + temp_str;        }        if (inTime < 10) {            temp_str = "0" + temp_str;        }        return temp_str;    }    //----------------------------------------------------------    private String toNormal(double inTime, int zone)     {        String am_pm;        int hr, min;        String temp_str = "";        inTime -= zone * 100;        if (inTime < 0) {            inTime += 2400;        }        if (inTime >= 1200) {            am_pm = " pm";            if (inTime >= 1300) {                inTime -= 1200;            }        } else {            am_pm = " am";        }        hr = (int) inTime / 100;        temp_str = String.valueOf(hr) + ":";        min = (int) inTime % 100;        if (min < 10) {            temp_str = temp_str + "0";        }        temp_str = temp_str + String.valueOf(min);//        System.out.println("### " + hr + ":" + min );        temp_str = temp_str + am_pm;        return temp_str;    }    //----------------------------------------------------------    private void calculate()     {        if (thePlace.getLatitude() >= 90.0) {            lat = 89.999 * Math.PI / 180.0;        } else {            lat = thePlace.getLatitude() * Math.PI / 180.0;        }        lon = thePlace.getLongitude() * Math.PI / 180.0;        FC = 2 * Math.PI;        TN = (lon / FC) + 0.5;        X = 1;        Y = 1;        sw = 0;        f1();        T9 = T;        X = theDate.getDay();        Y = theDate.getMonth();        f1();        YD = T - T9 + 1;        X = (double) ((int) (T + 1) / 7);        Y = (int) X;        WD = (int) (7 * (X - Y) + 0.5);        T = T + 3449.5 + TN;        X = YD - WD;        f2();        X = -0.0143;        f4();        if (Y <= -1) {            sunrise = 9999;            sunset = 9999;            // Sun up; does not set            daylength = 1440;        } else if (Y >= 1) {            sunrise = -9999;            sunset = -9999;            // Sun never rises            daylength = 0;        } else {            S0 = Z;            H = -S0;            f5();            X = ZT + EO;            f6();            RI = X * 100 + Y;            risemins = X * 60 + Y;            sunrise = RI;            H = S0;            f5();            X = ZT + EO;            f6();            SE = X * 100 + Y;            sunset = SE;            setmins = X * 60 + Y;            if (sunset < sunrise) {                setmins += 1440;            }            daylength = setmins - risemins;        }    }    private void f1()     {        T = 367 * (theDate.getYear() - 1980);        T = T - (int) (7 * (theDate.getYear() + (int) ((Y + 9) / 12)) / 4);        if ((Y - 9) > 0) {            S = 1.0;        }        if ((Y - 9) < 0) {            S = -1.0;        }        if ((Y - 9) == 0) {            S = 0;        }        A = Math.abs(Y - 9);        Z = (int) ((theDate.getYear() + S * (int) (A / 7)) / 100);        T = T - (int) (3 * (Z + 1) / 4);        T = T + (int) (275 * Y / 9) + X - 0.5;    }    private void f2()     {        MA = A0 + A1 * T;        ML = L0 + L1 * T;        X = Math.sin(ML);        Y = Math.cos(ML);        f3();        ML = Z;        DL = 2 * E * Math.sin(MA) + 1.25 * (E * E) * Math.sin(2 * MA);        TA = MA + DL;        TL = ML + DL;        X = Math.sin(TL) * Math.sin(OB);        Y = Math.sqrt(1 - (X * X));        f3();        DE = Z;        if (Z > Math.PI) {            Z = -FC;        }        X = Math.sin(TL) * Math.cos(OB);        Y = Math.cos(TL);        f3();        RA = Z;    }    private void f3()     {        C = 0;        N = 0;        if (Y != 0.0) {            Z = X / Y;        } else {            Z = 0;            C = 1;            if (X < 0) {                N = 1;            }        }        Z = Math.atan(Z);        if (C == 1) {            Z = Math.PI / 2 - Z;        }        if (N == 1) {            Z = -1 * Z;        }        if (Y < 0) {            Z = Z + Math.PI;        }        if (Z < 0) {            Z = Z + 2 * Math.PI;        }    }    private void f4()     {        Y = (X - Math.sin(lat) * Math.sin(DE))                / (Math.cos(lat) * Math.cos(DE));        if (Math.abs(Y) <= 1) {            X = Math.sqrt(1 - (Y * Y));            f3();        }    }    private void f5()     {        ZT = H + RA + lon - ML - Math.PI;        X = Math.sin(ZT);        Y = Math.cos(ZT);        f3();        ZT = Z;    }    private void f6()     {        W = X * 24 / FC;        X = (int) W;        Z = (W - X) * 60;        Y = (int) Z;        Z = (int) ((Z - Y) * 60);    }}